body {
	background-color: red;
	min-height: 100vh;
	display: flex;
}

/*=======
VARIABLES
=======*/
@prefferedWidth: 50px;
@height: @prefferedWidth + 10px;
@newVarbiable: 10rem;

#header {
	width: @prefferedWidth;
	height: @newVarbiable;
}

/*====
MIXINS
====*/
// Mixins are a way of including ("mixing in") a bunch of properties from one rule-set into another rule-set

//Defined a class, that takes in 1 parameter, and were using that parameter to define the value of attributes
.bordered(@color) {
	border-top: dotted 1px @color;
	border-bottom: solid 2px @color;
}

#menu a {
	color: #111;
	.bordered(red); //this is calling the .bordered class and inserting it on this scope
}

.post a {
	color: red;
	.bordered(blue);
}

/*=====
NESTING
=====*/
// Less gives you the ability to use nesting instead of, or in combination with cascading
// The resulting code is more concise, and mimics the structure of your HTML
#header {
	color: black;
	.navigation {
		font-size: 12px;
	}
	.logo {
		width: 300px;

		&:hover {
			width: 250px;
		}
	}
}
// You can also bundle pseudo-selectors with your mixins using this method. Here's the classic clearfix hack, rewritten as a mixin (& represents the current selector parent):
.clearfix {
	display: block;
	zoom: 1;

	&:after {
		content: " ";
		display: block;
		font-size: 0;
		height: 0;
		clear: both;
		visibility: hidden;
	}
}

/*==========================
NESTED AT-RULES AND BUBBLING
==========================*/
// At-rules such as @media or @supports can be nested in the same way as selectors
.component {
	width: 300px;

	@media (min-width: 768px) {
		width: 600px;

		@media (min-resolution: 192dpi) {
			background-image: url(/img/retina2x.png);
		}
	}

	@media (min-width: 1280px) {
		width: 800px;
	}
}

/*========
OPERATIONS
========*/
// Arithmetical operations +, -, *, / can operate on any number, color or variable. If it is possible, mathematical operations take units into account and convert numbers before adding, subtracting or comparing them

// numbers are converted into the same units
@conversion-1: 5cm + 10mm; // result is 6cm
@conversion-2: 2 - 3cm - 5mm; // result is -1.5cm

// conversion is impossible, If the conversion is impossible or not meaningful, units are ignored
@incompatible-units: 2 + 5px - 3cm; // result is 4px

// example with variables
@base: 5%;
@filler: @base * 2; // result is 10%
@other: @base + @filler; // result is 15%

// Multiplication and division do not convert numbers
@base: 2cm * 3mm; // result is 6cm

// You can also do arithmetic on colors
@CustomColor: (#224488 / 2); // result is #112244
.anotherCustomClass {
	background-color: @CustomColor+#111; // result is #223355
}

/*==============
calc() exception
==============*/
@varCustom: 50vh/2;
.customClass {
	width: calc(50% + (@varCustom - 20px)); // result is calc(50% + (25vh - 20px))
}

/*======
ESCAPING
======*/
// Escaping allows you to use any arbitrary string as property or variable value. Anything inside ~"anything" or ~'anything' is used as is with no changes except interpolation.
@min768: ~"(min-width: 768px)";

.element {
	@media @min768 {
		font-size: 1.2rem;
	}
}

/*=======
FUNCTIONS
=======*/
// Less provides a variety of functions which transform colors, manipulate strings and do maths. They are documented fully in the function reference.

@base: #f04615;
@newWidth: 0.5;

.class {
	width: percentage(@newWidth); // returns `50%`
	color: saturate(@base, 5%);
	background-color: spin(lighten(@base, 25%), 8);
}


/*======================
NAMESPACES AND ACCESSORS
======================*/
// (Not to be confused with CSS @namespace or namespace selectors).
// Sometimes, you may want to group your mixins, for organizational purposes, or just to offer some encapsulation

// create a grouping of mixin and use them dynamically later
#bundle() {
	.button {
		display: block;
		border: 1px solid black;
		background-color: grey;

		&:hover {
			background-color: white;
		}
	}

	.tab {
		background-color: red;
	}

	.citation {
		background-color: blue;
	}
}

// use the mixins we have declare earlier
#header a {
	color: orange;
	#bundle.button(); // can also be written as #bundle > .button

	li {
		color: gray;
		#bundle.citation()
	}	
}

/*==
MAPS
==*/
// you can also use mixins and rulesets as maps of values
#colors() {
	primary: blue;
	secondary: green;
}

.button {
	color: #colors[primary];
	border: 1px solid #colors[secondary];
}

/*===
SCOPE
===*/
// Scope in Less is very similar to that of CSS. Variables and mixins are first looked for locally, and if they aren't found, it's inherited from the "parent" scope.

@var: red; //variable outside scope

#page {
	@var: white; //variable inside scope, regardless if its on top or bottom, as long as same scope
	#header {
		color: @var; // white
	}
}

/*======
COMMENTS
======*/
// Both block-style and inline comments may be used:

/*=======
IMPORTING
=======*/
// @import "library"; // library.less
@import "typo.css";